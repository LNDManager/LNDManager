@page "/pending-channels"
@inject Lnrpc.Lightning.LightningClient lightningClient
@inject IIndicatorService IndicatorService

<Indicator IndicatorContext="pending-channels">
    @if (PendingChannelsResponse != null)
    {
        <h2 class="card-title">Pending Open Channels <span class="badge badge-primary">@PendingChannelsResponse.PendingOpenChannels.Count</span></h2>
        @if (PendingChannelsResponse.PendingOpenChannels.Count == 0)
        {
            <div>No pending open channels.</div>
        }
        else
        {
            <Table>
                <thead>
                    <tr>
                        <th>Alias</th>
                        <th>Channel Point</th>
                        <th>Local Balance [sats]</th>
                        <th title="The minimum satoshis this node is required to reserve in its balance.">Local Reserve Balance [sats]</th>
                        <th>Remote Balance [sats]</th>
                        <th>Remote Reserve Balance [sats]</th>
                        <th>Comit Fee [sats]</th>
                        <th>Capacity [sats]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var channel in PendingChannelsResponse.PendingOpenChannels)
                    {
                        <tr>
                            <td class="text-nowrap">
                                @(PeerNodeDictionary_PendingOpen.ContainsKey(channel.Channel.ChannelPoint) ? PeerNodeDictionary_PendingOpen[channel.Channel.ChannelPoint].Node.Alias : "Unable to find node")
                            </td>
                            <td>@channel.Channel.ChannelPoint</td>
                            <td>@channel.Channel.LocalBalance</td>
                            <td>@channel.Channel.LocalChanReserveSat</td>
                            <td>@channel.Channel.RemoteBalance</td>
                            <td>@channel.Channel.RemoteChanReserveSat</td>
                            <td>@channel.CommitFee</td>
                            <td>@channel.Channel.Capacity</td>
                        </tr>
                    }
                </tbody>
            </Table>
            @if (PendingOpenChannelNodesErrorMessages.Any())
            {
                <div class="alert alert-danger mt-3" role="alert">
                    <ul>
                        @foreach (var message in PendingOpenChannelNodesErrorMessages)
                        {
                            <li>@message</li>
                        }
                    </ul>
                </div>
            }
        }
    }
</Indicator>


@code {
    private PendingChannelsResponse PendingChannelsResponse { get; set; }
    private Dictionary<string, NodeInfo> PeerNodeDictionary_PendingOpen { get; } = new Dictionary<string, NodeInfo>();
    public List<string> PendingOpenChannelNodesErrorMessages { get; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadChannels();

        await base.OnInitializedAsync();
    }

    private async Task LoadChannels()
    {
        await IndicatorService.StartTaskAsync(async (task) =>
        {
            PendingChannelsResponse = await lightningClient.PendingChannelsAsync(new PendingChannelsRequest());
            await LoadChannelsPendingOpen();
        }, "pending-channels");
    }

    private async Task LoadChannelsPendingOpen()
    {
        foreach (var channel in PendingChannelsResponse.PendingOpenChannels)
        {
            try
            {
                var nodeInfo = await lightningClient.GetNodeInfoAsync(new NodeInfoRequest { PubKey = channel.Channel.RemoteNodePub, IncludeChannels = false });
                PeerNodeDictionary_PendingOpen.Add(channel.Channel.ChannelPoint, nodeInfo);
            }
            catch (Grpc.Core.RpcException ex)
            {
                PendingOpenChannelNodesErrorMessages.Add(ex.Message);
            }
        }
    }
}
